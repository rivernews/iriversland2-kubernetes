version: 2.1

# setting env var
# various ways: https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-job

# sending env var by pipeline parameters
# this is mainly used for API
# https://github.com/CircleCI-Public/api-preview-docs/blob/master/docs/pipeline-parameters.md
parameters:
  kubernetes-cluster-droplet-size:
    type: string
    # see all droplet size options
    # `doctl compute size list`
    # https://developers.digitalocean.com/documentation/changelog/api-v2/new-size-slugs-for-droplet-plan-changes/
    default: ''

orbs:
  slack: circleci/slack@3.3.0

# yaml basic and advance: https://circleci.com/docs/2.0/writing-yaml/#section=configuration
jobs:
  build_tf_toolkit:
    docker:
      - image: circleci/buildpack-deps:stretch
    environment:
      IMAGE_NAME: shaungc/terraform-kubectl-image
    working_directory: ~/repo/tf-kubectl-toolkit
    steps:
      - checkout: # retrieves the code from GitHub
          path: ~/repo

      # only run blocks below if you updated Dockerfile or terraform script in this repo
      #
      #
      - setup_remote_docker # sets up a remote, isolated environment for each build. This is required before you use any docker command inside a job step.
      - run:
          name: Build Terraform-Kubectl Toolkit image
          command: |
            docker build -f Dockerfile -t $IMAGE_NAME:latest ..
      - run:
          name: Push Docker Image
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_SHA1
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$CIRCLE_SHA1

  build_postgres:
    docker:
      - image: circleci/buildpack-deps:stretch
    environment:
      IMAGE_NAME: shaungc/postgres-cdc
      # change this and release.json to pick up changes and use it in deployment
      IMAGE_TAG: 11.5-r25
    working_directory: ~/repo/postgres-cdc
    steps:
      - checkout: # retrieves the code from GitHub
          path: ~/repo
      - setup_remote_docker
      - run:
          name: Build and push postgres image
          command: |
            docker build -f Dockerfile -t $IMAGE_NAME:latest .
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  build_code_server:
    docker:
      - image: circleci/buildpack-deps:stretch
    environment:
      IMAGE_NAME: shaungc/code-server
      # change this and tf microservice module `app_container_image_tag` to pick up changes and use it in deployment
      IMAGE_TAG: 3.10.2
    working_directory: ~/repo/code-server
    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker
      - run:
          name: Build and push code-server image
          command: |
            docker build -f Dockerfile -t $IMAGE_NAME:latest .
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  cluster_exec_terraform:
    docker:
      - image: shaungc/terraform-kubectl-image
    working_directory: ~/repo/cluster
    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker
      - run:
          name: Prepare terraform
          command: |
            sh ../tf-kubectl-toolkit/circleci.sh "<< pipeline.parameters.kubernetes-cluster-droplet-size >>"
      - run:
          name: Plan Terraform
          command: |
            source $BASH_ENV

            echo "Initiate Terraform Against Cluster"
            chmod +x init-backend-cicd.sh
            sh ./init-backend-cicd.sh
            terraform validate

            terraform plan
      - run:
          name: Apply Terraform
          command: |
            source $BASH_ENV
            case $CIRCLE_BRANCH in
              destroy-cluster)
                # destroy
                terraform destroy --auto-approve
                ;;

              release-cluster)
                # release
                terraform apply --auto-approve
                ;;
            esac
      - slack/status:
          # mentions: 'here,'
          success_message: "*Cluster Terraform Job Complete*\nThe cluster is created/updated/destroyed successfully"

  exec_terraform:
    docker:
      - image: shaungc/terraform-kubectl-image
    working_directory: ~/repo/terraform
    steps:
      - checkout: # retrieves the code from GitHub
          path: ~/repo
      - setup_remote_docker # sets up a remote, isolated environment for each build. This is required before you use any docker command inside a job step.
      - run:
          name: Prepare terraform
          command: |
            sh ../tf-kubectl-toolkit/circleci.sh "<< pipeline.parameters.kubernetes-cluster-droplet-size >>"
      - run:
          name: Plan Terraform
          command: |
            source $BASH_ENV

            echo "Initiate Terraform Against Cluster"
            chmod +x init-backend-cicd.sh
            sh ./init-backend-cicd.sh
            terraform validate

            echo "Using droplet size ${TF_VAR_droplet_size}..."
            python release.py -p -y
      - run:
          name: Apply Terraform
          command: |
            source $BASH_ENV
            case $CIRCLE_BRANCH in
              destroy-*)
                # destroy
                python release.py -d -y
                ;;

              release*)
                # release
                python release.py -f -y
                ;;
            esac
      - slack/status:
          # mentions: 'here,'
          success_message: "*Build & Test Terraform Complete*\nThe Terraform base image \"shaungc/terraform-kubectl-image\" is ready to be used!"

# To validate this config file, run `circleci config validate`
# https://circleci.com/docs/2.0/local-cli/#validate-a-circleci-config
# You can install circle cli by `brew install circleci`
workflows:
  build-tf-toolkit:
    jobs:
      - build_tf_toolkit:
          filters:
              branches:
                only:
                  - master--disabled

  build-cluster:
    jobs:
      # - build_tf_toolkit:
      #     filters:
      #         branches:
      #           only:
      #             - release-cluster
      - cluster_exec_terraform:
          filters:
              branches:
                only:
                  - release-cluster
                  - destroy-cluster
          # requires:
          #   - build_tf_toolkit

  build-destroy:
    jobs:
      - exec_terraform:
          filters:
              branches:
                only:
                  - destroy-release
  build-release:
    jobs:
      - build_tf_toolkit:
          filters:
              branches:
                only:
                  - release
      - build_postgres:
          filters:
              branches:
                only:
                  - release
      - build_code_server:
          filters:
              branches:
                only:
                  - release
      - exec_terraform:
          filters:
              branches:
                only:
                  - release
          requires:
            - build_postgres
            - build_code_server
            - build_tf_toolkit
