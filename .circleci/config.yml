version: 2.1

# sending env var by pipeline parameters
# https://github.com/CircleCI-Public/api-preview-docs/blob/master/docs/pipeline-parameters.md
parameters:
  kubernetes-cluster-droplet-size:
    type: string
    default: "s-4vcpu-8gb"

orbs:
  slack: circleci/slack@3.3.0

# yaml basic and advance: https://circleci.com/docs/2.0/writing-yaml/#section=configuration
jobs:
  build:
    docker:
      - image: circleci/buildpack-deps:stretch
    environment:
      IMAGE_NAME: shaungc/terraform-kubectl-image
    working_directory: ~/repo/tf-kubectl-toolkit
    steps:
      - checkout: # retrieves the code from GitHub
          path: ~/repo
      
      # only run blocks below if you updated Dockerfile or terraform script in this repo
      #
      #
      - setup_remote_docker # sets up a remote, isolated environment for each build. This is required before you use any docker command inside a job step.
      - run:
          name: Build Terraform-Kubectl Toolkit image
          command: |
            docker build -f Dockerfile -t $IMAGE_NAME:latest ..
      - run:
          name: Push Docker Image
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_SHA1
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$CIRCLE_SHA1

  exec_terraform:
    docker:
      - image: shaungc/terraform-kubectl-image
    environment:
      TF_VAR_droplet_size: << pipeline.parameters.kubernetes-cluster-droplet-size >>
    working_directory: ~/repo/terraform
    steps:
      - checkout: # retrieves the code from GitHub
          path: ~/repo
      - setup_remote_docker # sets up a remote, isolated environment for each build. This is required before you use any docker command inside a job step.
      - run:
          name: Check Deploy Tools Availability
          command: |
            kubectl version --client
            DIGITALOCEAN_ACCESS_TOKEN=$TF_VAR_do_token doctl auth init
            mkdir -p ~/.kube
            doctl k8s cluster kubeconfig show project-shaungc-digitalocean-cluster > ~/.kube/config || true
            kubectl get all --all-namespaces || true
            docker -v
      - run:
          name: Initiate Terraform Against Cluster
          command: |
            chmod +x init-backend-cicd.sh
            sh ./init-backend-cicd.sh
      - run:
          name: Validate Terraform
          command: |
            terraform validate
      - run:
          name: Plan Terraform
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then  
              python release.py -p -y
            else
              echo 'Skipped'
            fi
      - run:
          name: Apply Terraform
          command: |
            if [ "${CIRCLE_BRANCH}" == "release" ];
            then
              python release.py -f -y
            elif [ "${CIRCLE_BRANCH}" == "destroy-release" ];
            then
              python release.py -d -y
            else
              echo 'Skipped apply terraform'
            fi
      - slack/status:
          # mentions: 'here,'
          success_message: "*Build & Test Terraform Complete*\nThe Terraform base image \"shaungc/terraform-kubectl-image\" is ready to be used!"

# To validate this config file, run `circleci config validate`
# https://circleci.com/docs/2.0/local-cli/#validate-a-circleci-config
# You can install circle cli by `brew install circleci`
workflows:
  build-master:
    jobs:
      - build:
          filters:
              branches:
                only: 
                  - master
      - exec_terraform:
          filters:
              branches:
                only: 
                  - release
                  - destroy-release
          # requires:
          #   - build
